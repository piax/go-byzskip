// In order to re-generate the golang packages for `Message` you will need...
// protoc -I. --go_out=. ayame.proto
//
// Old:
// 1. Protobuf binary (tested with protoc 3.17.3)
// 2. protoc-gen-gofast binary - go get github.com/gogo/protobuf/protoc-gen-gofast
// protoc --gofast_out=. ayame.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.17.3
// source: ayame.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_INT     KeyType = 0
	KeyType_FLOAT   KeyType = 1
	KeyType_STRING  KeyType = 2
	KeyType_ID      KeyType = 3
	KeyType_RANGE   KeyType = 4
	KeyType_UNIFIED KeyType = 5
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "INT",
		1: "FLOAT",
		2: "STRING",
		3: "ID",
		4: "RANGE",
		5: "UNIFIED",
	}
	KeyType_value = map[string]int32{
		"INT":     0,
		"FLOAT":   1,
		"STRING":  2,
		"ID":      3,
		"RANGE":   4,
		"UNIFIED": 5,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ayame_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_ayame_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{0}
}

type ConnectionType int32

const (
	// sender does not have a connection to peer, and no extra information (default)
	ConnectionType_NOT_CONNECTED ConnectionType = 0
	// sender has a live connection to peer
	ConnectionType_CONNECTED ConnectionType = 1
	// sender recently connected to peer
	ConnectionType_CAN_CONNECT ConnectionType = 2
	// sender recently tried to connect to peer repeatedly but failed to connect
	// ("try" here is loose, but this should signal "made strong effort, failed")
	ConnectionType_CANNOT_CONNECT ConnectionType = 3
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "NOT_CONNECTED",
		1: "CONNECTED",
		2: "CAN_CONNECT",
		3: "CANNOT_CONNECT",
	}
	ConnectionType_value = map[string]int32{
		"NOT_CONNECTED":  0,
		"CONNECTED":      1,
		"CAN_CONNECT":    2,
		"CANNOT_CONNECT": 3,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ayame_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_ayame_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{1}
}

type MessageType int32

const (
	MessageType_PUT_VALUE     MessageType = 0
	MessageType_GET_VALUE     MessageType = 1
	MessageType_ADD_PROVIDER  MessageType = 2
	MessageType_GET_PROVIDERS MessageType = 3
	MessageType_FIND_NODE     MessageType = 4
	MessageType_FIND_MV       MessageType = 5
	MessageType_FIND_RANGE    MessageType = 6
	MessageType_PING          MessageType = 7
	MessageType_DEL_NODE      MessageType = 8
	MessageType_UNICAST       MessageType = 9
	MessageType_MULTICAST     MessageType = 10
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "PUT_VALUE",
		1:  "GET_VALUE",
		2:  "ADD_PROVIDER",
		3:  "GET_PROVIDERS",
		4:  "FIND_NODE",
		5:  "FIND_MV",
		6:  "FIND_RANGE",
		7:  "PING",
		8:  "DEL_NODE",
		9:  "UNICAST",
		10: "MULTICAST",
	}
	MessageType_value = map[string]int32{
		"PUT_VALUE":     0,
		"GET_VALUE":     1,
		"ADD_PROVIDER":  2,
		"GET_PROVIDERS": 3,
		"FIND_NODE":     4,
		"FIND_MV":       5,
		"FIND_RANGE":    6,
		"PING":          7,
		"DEL_NODE":      8,
		"UNICAST":       9,
		"MULTICAST":     10,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ayame_proto_enumTypes[2].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_ayame_proto_enumTypes[2]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{2}
}

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidAfter  int64  `protobuf:"varint,1,opt,name=validAfter,proto3" json:"validAfter,omitempty"`
	ValidBefore int64  `protobuf:"varint,2,opt,name=validBefore,proto3" json:"validBefore,omitempty"`
	Sig         []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{0}
}

func (x *Cert) GetValidAfter() int64 {
	if x != nil {
		return x.ValidAfter
	}
	return 0
}

func (x *Cert) GetValidBefore() int64 {
	if x != nil {
		return x.ValidBefore
	}
	return 0
}

func (x *Cert) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type KeyType `protobuf:"varint,1,opt,name=type,proto3,enum=ayame.pb.KeyType" json:"type,omitempty"`
	Body []byte  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{1}
}

func (x *Key) GetType() KeyType {
	if x != nil {
		return x.Type
	}
	return KeyType_INT
}

func (x *Key) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start          *Key `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	StartInclusive bool `protobuf:"varint,2,opt,name=start_inclusive,json=startInclusive,proto3" json:"start_inclusive,omitempty"`
	StartExtent    *Key `protobuf:"bytes,3,opt,name=startExtent,proto3" json:"startExtent,omitempty"`
	End            *Key `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	EndInclusive   bool `protobuf:"varint,5,opt,name=end_inclusive,json=endInclusive,proto3" json:"end_inclusive,omitempty"`
	EndExtent      *Key `protobuf:"bytes,6,opt,name=endExtent,proto3" json:"endExtent,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetStart() *Key {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetStartInclusive() bool {
	if x != nil {
		return x.StartInclusive
	}
	return false
}

func (x *Range) GetStartExtent() *Key {
	if x != nil {
		return x.StartExtent
	}
	return nil
}

func (x *Range) GetEnd() *Key {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Range) GetEndInclusive() bool {
	if x != nil {
		return x.EndInclusive
	}
	return false
}

func (x *Range) GetEndExtent() *Key {
	if x != nil {
		return x.EndExtent
	}
	return nil
}

// Sender information
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of node =base58(multihash(nodePubKey))
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// multiaddrs for a given peer
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// used to signal the sender's connection capabilities to the peer
	Connection ConnectionType `protobuf:"varint,3,opt,name=connection,proto3,enum=ayame.pb.ConnectionType" json:"connection,omitempty"`
	// the key to join to the overlay
	Key *Key `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// the membership vector to join the overlay
	Mv []byte `protobuf:"bytes,5,opt,name=mv,proto3" json:"mv,omitempty"`
	// certificate information (=a signature for id,key,mv)
	Cert []byte `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{3}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Peer) GetConnection() ConnectionType {
	if x != nil {
		return x.Connection
	}
	return ConnectionType_NOT_CONNECTED
}

func (x *Peer) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Peer) GetMv() []byte {
	if x != nil {
		return x.Mv
	}
	return nil
}

func (x *Peer) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key that references this record
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The actual value this record is storing
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Time the record was received, set by receiver
	TimeReceived string `protobuf:"bytes,5,opt,name=timeReceived,proto3" json:"timeReceived,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{4}
}

func (x *Record) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Record) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Record) GetTimeReceived() string {
	if x != nil {
		return x.TimeReceived
	}
	return ""
}

type TableIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Min   *Key  `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max   *Key  `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *TableIndex) Reset() {
	*x = TableIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndex) ProtoMessage() {}

func (x *TableIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndex.ProtoReflect.Descriptor instead.
func (*TableIndex) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{5}
}

func (x *TableIndex) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TableIndex) GetMin() *Key {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TableIndex) GetMax() *Key {
	if x != nil {
		return x.Max
	}
	return nil
}

type FindNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               *Key          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MV                []byte        `protobuf:"bytes,2,opt,name=MV,proto3" json:"MV,omitempty"`
	ClosestIndex      *TableIndex   `protobuf:"bytes,3,opt,name=closestIndex,proto3" json:"closestIndex,omitempty"`
	NeighborListIndex []*TableIndex `protobuf:"bytes,4,rep,name=neighborListIndex,proto3" json:"neighborListIndex,omitempty"`
}

func (x *FindNodeRequest) Reset() {
	*x = FindNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeRequest) ProtoMessage() {}

func (x *FindNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeRequest.ProtoReflect.Descriptor instead.
func (*FindNodeRequest) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{6}
}

func (x *FindNodeRequest) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FindNodeRequest) GetMV() []byte {
	if x != nil {
		return x.MV
	}
	return nil
}

func (x *FindNodeRequest) GetClosestIndex() *TableIndex {
	if x != nil {
		return x.ClosestIndex
	}
	return nil
}

func (x *FindNodeRequest) GetNeighborListIndex() []*TableIndex {
	if x != nil {
		return x.NeighborListIndex
	}
	return nil
}

// designed to be used in all protocols
type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // version information
	Type      MessageType      `protobuf:"varint,2,opt,name=type,proto3,enum=ayame.pb.MessageType" json:"type,omitempty"`
	Timestamp int64            `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // The time when the message was originated
	Id        string           `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                // the message identifier
	Req       *FindNodeRequest `protobuf:"bytes,5,opt,name=req,proto3" json:"req,omitempty"`
	// Used to specify the key associated with this message (may be a range in multicast)
	Key *Key `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// Used to specify the MV associated with this message
	Mv []byte `protobuf:"bytes,7,opt,name=mv,proto3" json:"mv,omitempty"`
	// protocol specific data added by originator (such as level info)
	OriginatorAppData string `protobuf:"bytes,8,opt,name=originatorAppData,proto3" json:"originatorAppData,omitempty"`
	// peer information of the node who created the message
	Originator *Peer `protobuf:"bytes,9,opt,name=originator,proto3" json:"originator,omitempty"` // XXX ConnectionType is always CONNECTED for node itself
	// the Secp256k1 public key (32bytes)
	OriginatorPubKey []byte `protobuf:"bytes,10,opt,name=originatorPubKey,proto3" json:"originatorPubKey,omitempty"`
	// signature of message by originator node (except originatorSign and senderAppData)
	OriginatorSign []byte `protobuf:"bytes,11,opt,name=originatorSign,proto3" json:"originatorSign,omitempty"`
	// protocol specific data added by sender (such as level info)
	SenderAppData string `protobuf:"bytes,12,opt,name=senderAppData,proto3" json:"senderAppData,omitempty"`
	// Used to return peers closer to a key in FIND_NODE
	CloserPeers []*Peer `protobuf:"bytes,13,rep,name=closerPeers,proto3" json:"closerPeers,omitempty"`
	// Used to include candidate peers in FIND_NODE
	CandidatePeers []*Peer `protobuf:"bytes,14,rep,name=candidatePeers,proto3" json:"candidatePeers,omitempty"`
	// used to include path in UNICAST
	Path []*Peer `protobuf:"bytes,15,rep,name=path,proto3" json:"path,omitempty"`
	// the record used to deliver in this message
	Record []*Record `protobuf:"bytes,16,rep,name=record,proto3" json:"record,omitempty"`
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{7}
}

func (x *MessageData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MessageData) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_PUT_VALUE
}

func (x *MessageData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MessageData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageData) GetReq() *FindNodeRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *MessageData) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MessageData) GetMv() []byte {
	if x != nil {
		return x.Mv
	}
	return nil
}

func (x *MessageData) GetOriginatorAppData() string {
	if x != nil {
		return x.OriginatorAppData
	}
	return ""
}

func (x *MessageData) GetOriginator() *Peer {
	if x != nil {
		return x.Originator
	}
	return nil
}

func (x *MessageData) GetOriginatorPubKey() []byte {
	if x != nil {
		return x.OriginatorPubKey
	}
	return nil
}

func (x *MessageData) GetOriginatorSign() []byte {
	if x != nil {
		return x.OriginatorSign
	}
	return nil
}

func (x *MessageData) GetSenderAppData() string {
	if x != nil {
		return x.SenderAppData
	}
	return ""
}

func (x *MessageData) GetCloserPeers() []*Peer {
	if x != nil {
		return x.CloserPeers
	}
	return nil
}

func (x *MessageData) GetCandidatePeers() []*Peer {
	if x != nil {
		return x.CandidatePeers
	}
	return nil
}

func (x *MessageData) GetPath() []*Peer {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MessageData) GetRecord() []*Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MessageData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// signature of message by sender node
	SenderSign []byte `protobuf:"bytes,2,opt,name=senderSign,proto3" json:"senderSign,omitempty"`
	// peer information of the node who sent the message
	Sender     *Peer `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	IsRequest  bool  `protobuf:"varint,4,opt,name=isRequest,proto3" json:"isRequest,omitempty"`   // true if message is a request (requires response)
	IsResponse bool  `protobuf:"varint,5,opt,name=isResponse,proto3" json:"isResponse,omitempty"` // true if message is the response
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ayame_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ayame_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ayame_proto_rawDescGZIP(), []int{8}
}

func (x *Message) GetData() *MessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetSenderSign() []byte {
	if x != nil {
		return x.SenderSign
	}
	return nil
}

func (x *Message) GetSender() *Peer {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *Message) GetIsResponse() bool {
	if x != nil {
		return x.IsResponse
	}
	return false
}

var File_ayame_proto protoreflect.FileDescriptor

var file_ayame_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61,
	0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x22, 0x5a, 0x0a, 0x04, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x73, 0x69, 0x67, 0x22, 0x40, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6d,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6d, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22,
	0x54, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xc0, 0x01, 0x0a, 0x0f,
	0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x4d, 0x56,
	0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x11, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xee,
	0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x79,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6d, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6d, 0x76, 0x12,
	0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xba, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x79, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x79, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x49, 0x0a, 0x07,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03,
	0x2a, 0xb0, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x56, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x0a, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ayame_proto_rawDescOnce sync.Once
	file_ayame_proto_rawDescData = file_ayame_proto_rawDesc
)

func file_ayame_proto_rawDescGZIP() []byte {
	file_ayame_proto_rawDescOnce.Do(func() {
		file_ayame_proto_rawDescData = protoimpl.X.CompressGZIP(file_ayame_proto_rawDescData)
	})
	return file_ayame_proto_rawDescData
}

var file_ayame_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ayame_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ayame_proto_goTypes = []interface{}{
	(KeyType)(0),            // 0: ayame.pb.KeyType
	(ConnectionType)(0),     // 1: ayame.pb.ConnectionType
	(MessageType)(0),        // 2: ayame.pb.MessageType
	(*Cert)(nil),            // 3: ayame.pb.Cert
	(*Key)(nil),             // 4: ayame.pb.Key
	(*Range)(nil),           // 5: ayame.pb.Range
	(*Peer)(nil),            // 6: ayame.pb.Peer
	(*Record)(nil),          // 7: ayame.pb.Record
	(*TableIndex)(nil),      // 8: ayame.pb.TableIndex
	(*FindNodeRequest)(nil), // 9: ayame.pb.FindNodeRequest
	(*MessageData)(nil),     // 10: ayame.pb.MessageData
	(*Message)(nil),         // 11: ayame.pb.Message
}
var file_ayame_proto_depIdxs = []int32{
	0,  // 0: ayame.pb.Key.type:type_name -> ayame.pb.KeyType
	4,  // 1: ayame.pb.Range.start:type_name -> ayame.pb.Key
	4,  // 2: ayame.pb.Range.startExtent:type_name -> ayame.pb.Key
	4,  // 3: ayame.pb.Range.end:type_name -> ayame.pb.Key
	4,  // 4: ayame.pb.Range.endExtent:type_name -> ayame.pb.Key
	1,  // 5: ayame.pb.Peer.connection:type_name -> ayame.pb.ConnectionType
	4,  // 6: ayame.pb.Peer.key:type_name -> ayame.pb.Key
	4,  // 7: ayame.pb.TableIndex.min:type_name -> ayame.pb.Key
	4,  // 8: ayame.pb.TableIndex.max:type_name -> ayame.pb.Key
	4,  // 9: ayame.pb.FindNodeRequest.key:type_name -> ayame.pb.Key
	8,  // 10: ayame.pb.FindNodeRequest.closestIndex:type_name -> ayame.pb.TableIndex
	8,  // 11: ayame.pb.FindNodeRequest.neighborListIndex:type_name -> ayame.pb.TableIndex
	2,  // 12: ayame.pb.MessageData.type:type_name -> ayame.pb.MessageType
	9,  // 13: ayame.pb.MessageData.req:type_name -> ayame.pb.FindNodeRequest
	4,  // 14: ayame.pb.MessageData.key:type_name -> ayame.pb.Key
	6,  // 15: ayame.pb.MessageData.originator:type_name -> ayame.pb.Peer
	6,  // 16: ayame.pb.MessageData.closerPeers:type_name -> ayame.pb.Peer
	6,  // 17: ayame.pb.MessageData.candidatePeers:type_name -> ayame.pb.Peer
	6,  // 18: ayame.pb.MessageData.path:type_name -> ayame.pb.Peer
	7,  // 19: ayame.pb.MessageData.record:type_name -> ayame.pb.Record
	10, // 20: ayame.pb.Message.data:type_name -> ayame.pb.MessageData
	6,  // 21: ayame.pb.Message.sender:type_name -> ayame.pb.Peer
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ayame_proto_init() }
func file_ayame_proto_init() {
	if File_ayame_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ayame_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ayame_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ayame_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ayame_proto_goTypes,
		DependencyIndexes: file_ayame_proto_depIdxs,
		EnumInfos:         file_ayame_proto_enumTypes,
		MessageInfos:      file_ayame_proto_msgTypes,
	}.Build()
	File_ayame_proto = out.File
	file_ayame_proto_rawDesc = nil
	file_ayame_proto_goTypes = nil
	file_ayame_proto_depIdxs = nil
}
