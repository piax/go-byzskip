// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ayame.proto

package ayame_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyType int32

const (
	KeyType_INT    KeyType = 0
	KeyType_FLOAT  KeyType = 1
	KeyType_STRING KeyType = 2
	KeyType_RANGE  KeyType = 3
)

var KeyType_name = map[int32]string{
	0: "INT",
	1: "FLOAT",
	2: "STRING",
	3: "RANGE",
}

var KeyType_value = map[string]int32{
	"INT":    0,
	"FLOAT":  1,
	"STRING": 2,
	"RANGE":  3,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{0}
}

type ConnectionType int32

const (
	// sender does not have a connection to peer, and no extra information (default)
	ConnectionType_NOT_CONNECTED ConnectionType = 0
	// sender has a live connection to peer
	ConnectionType_CONNECTED ConnectionType = 1
	// sender recently connected to peer
	ConnectionType_CAN_CONNECT ConnectionType = 2
	// sender recently tried to connect to peer repeatedly but failed to connect
	// ("try" here is loose, but this should signal "made strong effort, failed")
	ConnectionType_CANNOT_CONNECT ConnectionType = 3
)

var ConnectionType_name = map[int32]string{
	0: "NOT_CONNECTED",
	1: "CONNECTED",
	2: "CAN_CONNECT",
	3: "CANNOT_CONNECT",
}

var ConnectionType_value = map[string]int32{
	"NOT_CONNECTED":  0,
	"CONNECTED":      1,
	"CAN_CONNECT":    2,
	"CANNOT_CONNECT": 3,
}

func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}

func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{1}
}

type MessageType int32

const (
	MessageType_PUT_VALUE MessageType = 0
	MessageType_GET_VALUE MessageType = 1
	// 2, 3 are removed
	MessageType_FIND_NODE      MessageType = 4
	MessageType_PING           MessageType = 5
	MessageType_GET_CANDIDATES MessageType = 7
	MessageType_UNICAST        MessageType = 8
	MessageType_MULTICAST      MessageType = 9
)

var MessageType_name = map[int32]string{
	0: "PUT_VALUE",
	1: "GET_VALUE",
	4: "FIND_NODE",
	5: "PING",
	7: "GET_CANDIDATES",
	8: "UNICAST",
	9: "MULTICAST",
}

var MessageType_value = map[string]int32{
	"PUT_VALUE":      0,
	"GET_VALUE":      1,
	"FIND_NODE":      4,
	"PING":           5,
	"GET_CANDIDATES": 7,
	"UNICAST":        8,
	"MULTICAST":      9,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{2}
}

type Key struct {
	Type                 KeyType  `protobuf:"varint,1,opt,name=type,proto3,enum=ayame.pb.KeyType" json:"type,omitempty"`
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{0}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_INT
}

func (m *Key) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Sender information
type Peer struct {
	// id of node =base58(multihash(nodePubKey))
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// multiaddrs for a given peer
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// used to signal the sender's connection capabilities to the peer
	Connection ConnectionType `protobuf:"varint,3,opt,name=connection,proto3,enum=ayame.pb.ConnectionType" json:"connection,omitempty"`
	// the key to join to the overlay
	Key *Key `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// the membership vector to join the overlay
	Mv []byte `protobuf:"bytes,5,opt,name=mv,proto3" json:"mv,omitempty"`
	// certificate information (=a signature for id,key,mv)
	Cert                 []byte   `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{1}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Peer) GetConnection() ConnectionType {
	if m != nil {
		return m.Connection
	}
	return ConnectionType_NOT_CONNECTED
}

func (m *Peer) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Peer) GetMv() []byte {
	if m != nil {
		return m.Mv
	}
	return nil
}

func (m *Peer) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

type Record struct {
	// The key that references this record
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The actual value this record is storing
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The time when the record was created
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{2}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Record) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Record) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// designed to be used in all protocols
type MessageData struct {
	Version   string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Type      MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=ayame.pb.MessageType" json:"type,omitempty"`
	Timestamp int64       `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Id        string      `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Used to specify the key associated with this message (may be a range in multicast)
	Key *Key `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// Used to specify the MV associated with this message
	Mv []byte `protobuf:"bytes,7,opt,name=mv,proto3" json:"mv,omitempty"`
	// protocol specific data added by author (such as level info)
	AuthorAppData string `protobuf:"bytes,8,opt,name=authorAppData,proto3" json:"authorAppData,omitempty"`
	// peer information of the node who created the message
	Author *Peer `protobuf:"bytes,9,opt,name=author,proto3" json:"author,omitempty"`
	// the Secp256k1 public key (32bytes)
	AuthorPubKey []byte `protobuf:"bytes,10,opt,name=authorPubKey,proto3" json:"authorPubKey,omitempty"`
	// signature of message by authoring node (except authorSign and senderAppData)
	AuthorSign []byte `protobuf:"bytes,11,opt,name=authorSign,proto3" json:"authorSign,omitempty"`
	// protocol specific data added by sender (such as level info)
	SenderAppData string `protobuf:"bytes,12,opt,name=senderAppData,proto3" json:"senderAppData,omitempty"`
	// Used to return peers closer to a key in FIND_NODE / UNICAST
	CloserPeers []*Peer `protobuf:"bytes,13,rep,name=closerPeers,proto3" json:"closerPeers,omitempty"`
	// Used to return piggybacked candidate peers in FIND_NODE
	CandidatePeers []*Peer `protobuf:"bytes,14,rep,name=candidatePeers,proto3" json:"candidatePeers,omitempty"`
	// the record used to deliver in this message
	Record               *Record  `protobuf:"bytes,15,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{3}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return m.Size()
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MessageData) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_PUT_VALUE
}

func (m *MessageData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageData) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MessageData) GetMv() []byte {
	if m != nil {
		return m.Mv
	}
	return nil
}

func (m *MessageData) GetAuthorAppData() string {
	if m != nil {
		return m.AuthorAppData
	}
	return ""
}

func (m *MessageData) GetAuthor() *Peer {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *MessageData) GetAuthorPubKey() []byte {
	if m != nil {
		return m.AuthorPubKey
	}
	return nil
}

func (m *MessageData) GetAuthorSign() []byte {
	if m != nil {
		return m.AuthorSign
	}
	return nil
}

func (m *MessageData) GetSenderAppData() string {
	if m != nil {
		return m.SenderAppData
	}
	return ""
}

func (m *MessageData) GetCloserPeers() []*Peer {
	if m != nil {
		return m.CloserPeers
	}
	return nil
}

func (m *MessageData) GetCandidatePeers() []*Peer {
	if m != nil {
		return m.CandidatePeers
	}
	return nil
}

func (m *MessageData) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Message struct {
	Data *MessageData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// signature of message by sender node
	SenderSign []byte `protobuf:"bytes,2,opt,name=senderSign,proto3" json:"senderSign,omitempty"`
	// peer information of the node who sent the message=base58(multihash(nodePubKey))
	Sender               *Peer    `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	IsResponse           bool     `protobuf:"varint,4,opt,name=isResponse,proto3" json:"isResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b4b639837d62b3e, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() *MessageData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetSenderSign() []byte {
	if m != nil {
		return m.SenderSign
	}
	return nil
}

func (m *Message) GetSender() *Peer {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetIsResponse() bool {
	if m != nil {
		return m.IsResponse
	}
	return false
}

func init() {
	proto.RegisterEnum("ayame.pb.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("ayame.pb.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("ayame.pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Key)(nil), "ayame.pb.Key")
	proto.RegisterType((*Peer)(nil), "ayame.pb.Peer")
	proto.RegisterType((*Record)(nil), "ayame.pb.Record")
	proto.RegisterType((*MessageData)(nil), "ayame.pb.MessageData")
	proto.RegisterType((*Message)(nil), "ayame.pb.Message")
}

func init() { proto.RegisterFile("ayame.proto", fileDescriptor_7b4b639837d62b3e) }

var fileDescriptor_7b4b639837d62b3e = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6a, 0xdb, 0x4a,
	0x14, 0xce, 0x48, 0xfe, 0x3d, 0xfe, 0x89, 0x72, 0xc8, 0x85, 0x59, 0x5c, 0x7c, 0x8d, 0xb9, 0xf7,
	0xe2, 0x66, 0x11, 0x4a, 0x5a, 0x4a, 0x97, 0x55, 0x65, 0x25, 0x98, 0x24, 0xb2, 0x19, 0xcb, 0xed,
	0x32, 0xc8, 0xd6, 0x90, 0x8a, 0xc6, 0x92, 0x90, 0x14, 0x83, 0xde, 0xa4, 0x8b, 0xbe, 0x41, 0x5f,
	0xa4, 0xcb, 0x3e, 0x42, 0x49, 0x9f, 0xa3, 0x50, 0x66, 0x46, 0xb6, 0xe5, 0x34, 0xd0, 0x9d, 0xbe,
	0xf3, 0xf3, 0x9d, 0xef, 0x7c, 0x33, 0x23, 0x68, 0x79, 0xb9, 0xb7, 0xe2, 0xa7, 0x71, 0x12, 0x65,
	0x11, 0x36, 0x0a, 0xb0, 0x18, 0xbc, 0x01, 0xfd, 0x92, 0xe7, 0xf8, 0x1f, 0x54, 0xb2, 0x3c, 0xe6,
	0x94, 0xf4, 0xc9, 0xb0, 0x7b, 0x76, 0x74, 0xba, 0xc9, 0x9f, 0x5e, 0xf2, 0xdc, 0xcd, 0x63, 0xce,
	0x64, 0x1a, 0x11, 0x2a, 0x8b, 0xc8, 0xcf, 0xa9, 0xd6, 0x27, 0xc3, 0x36, 0x93, 0xdf, 0x83, 0x2f,
	0x04, 0x2a, 0x53, 0xce, 0x13, 0xec, 0x82, 0x16, 0xf8, 0x92, 0xa1, 0xc9, 0xb4, 0xc0, 0xc7, 0x63,
	0xa8, 0x7a, 0xbe, 0x9f, 0xa4, 0x54, 0xeb, 0xeb, 0xc3, 0x36, 0x53, 0x00, 0x5f, 0x03, 0x2c, 0xa3,
	0x30, 0xe4, 0xcb, 0x2c, 0x88, 0x42, 0xaa, 0xcb, 0x79, 0x74, 0x37, 0xcf, 0xda, 0xe6, 0xe4, 0xd8,
	0x52, 0x2d, 0xfe, 0x03, 0xfa, 0x47, 0x9e, 0xd3, 0x4a, 0x9f, 0x0c, 0x5b, 0x67, 0x9d, 0x3d, 0x89,
	0x4c, 0x64, 0x84, 0x80, 0xd5, 0x9a, 0x56, 0xa5, 0x36, 0x6d, 0xb5, 0x16, 0x6a, 0x97, 0x3c, 0xc9,
	0x68, 0x4d, 0xa9, 0x15, 0xdf, 0x03, 0x07, 0x6a, 0x8c, 0x2f, 0xa3, 0xc4, 0x47, 0x43, 0xd1, 0x11,
	0x99, 0x94, 0xfd, 0xc7, 0x50, 0x5d, 0x7b, 0x77, 0xf7, 0xbc, 0x58, 0x4f, 0x01, 0xfc, 0x1b, 0x9a,
	0x59, 0xb0, 0xe2, 0x69, 0xe6, 0xad, 0x62, 0x49, 0xae, 0xb3, 0x5d, 0x60, 0xf0, 0x53, 0x87, 0xd6,
	0x35, 0x4f, 0x53, 0xef, 0x96, 0x8f, 0xbc, 0xcc, 0x43, 0x0a, 0xf5, 0x35, 0x4f, 0x52, 0xb1, 0x9b,
	0x72, 0x62, 0x03, 0xf1, 0x59, 0x61, 0xb1, 0x26, 0x57, 0xfe, 0x6b, 0xa7, 0xbf, 0x68, 0x2f, 0xd9,
	0xbc, 0x37, 0x52, 0x7f, 0x34, 0xb2, 0xf0, 0xb9, 0xb2, 0xf5, 0xb9, 0xf0, 0xa5, 0xf6, 0x07, 0x5f,
	0xea, 0x5b, 0x5f, 0xfe, 0x85, 0x8e, 0x77, 0x9f, 0x7d, 0x88, 0x12, 0x33, 0x8e, 0x85, 0x68, 0xda,
	0x90, 0x5c, 0xfb, 0x41, 0xfc, 0x1f, 0x6a, 0x2a, 0x40, 0x9b, 0x92, 0xb9, 0xbb, 0x63, 0x16, 0xc7,
	0xcd, 0x8a, 0x2c, 0x0e, 0xa0, 0xad, 0xbe, 0xa6, 0xf7, 0x8b, 0x4b, 0x9e, 0x53, 0x90, 0x73, 0xf6,
	0x62, 0xd8, 0x03, 0x50, 0x78, 0x16, 0xdc, 0x86, 0xb4, 0x25, 0x2b, 0x4a, 0x11, 0xa1, 0x28, 0xe5,
	0xa1, 0xcf, 0xb7, 0x8a, 0xda, 0x4a, 0xd1, 0x5e, 0x10, 0x9f, 0x43, 0x6b, 0x79, 0x17, 0xa5, 0x3c,
	0x11, 0xf3, 0x53, 0xda, 0xe9, 0xeb, 0x4f, 0xc8, 0x2a, 0x97, 0xe0, 0x2b, 0xe8, 0x2e, 0xbd, 0xd0,
	0x0f, 0x7c, 0x2f, 0xe3, 0xaa, 0xa9, 0xfb, 0x64, 0xd3, 0xa3, 0x2a, 0x1c, 0x42, 0x2d, 0x91, 0xb7,
	0x84, 0x1e, 0xca, 0xdd, 0x8d, 0x5d, 0xbd, 0xba, 0x3d, 0xac, 0xc8, 0x0f, 0x3e, 0x13, 0xa8, 0x17,
	0x07, 0x28, 0x4e, 0xd8, 0x17, 0xe2, 0x89, 0xec, 0xf9, 0xfd, 0x84, 0xc5, 0x12, 0x4c, 0x96, 0x08,
	0x43, 0xd4, 0x6e, 0xd2, 0x10, 0x75, 0xdf, 0x4a, 0x11, 0x61, 0xbe, 0x42, 0xf2, 0xf8, 0x9f, 0x30,
	0x5f, 0x65, 0x05, 0x4f, 0x90, 0x32, 0x9e, 0xc6, 0x51, 0x98, 0x72, 0x79, 0x27, 0x1a, 0xac, 0x14,
	0x39, 0x79, 0x09, 0xf5, 0xe2, 0x05, 0x63, 0x1d, 0xf4, 0xb1, 0xe3, 0x1a, 0x07, 0xd8, 0x84, 0xea,
	0xf9, 0xd5, 0xc4, 0x74, 0x0d, 0x82, 0x00, 0xb5, 0x99, 0xcb, 0xc6, 0xce, 0x85, 0xa1, 0x89, 0x30,
	0x33, 0x9d, 0x0b, 0xdb, 0xd0, 0x4f, 0xde, 0x43, 0x77, 0xff, 0x1d, 0xe2, 0x11, 0x74, 0x9c, 0x89,
	0x7b, 0x63, 0x4d, 0x1c, 0xc7, 0xb6, 0x5c, 0x7b, 0x64, 0x1c, 0x60, 0x07, 0x9a, 0x3b, 0x48, 0xf0,
	0x10, 0x5a, 0x96, 0xe9, 0x6c, 0x2a, 0x0c, 0x0d, 0x11, 0xba, 0x96, 0xe9, 0x94, 0xba, 0x0c, 0xfd,
	0x24, 0xdb, 0x3e, 0x16, 0xc9, 0xda, 0x81, 0xe6, 0x74, 0xee, 0xde, 0xbc, 0x33, 0xaf, 0xe6, 0xb6,
	0x62, 0xbc, 0xb0, 0x37, 0x90, 0x08, 0x78, 0x3e, 0x76, 0x46, 0x37, 0xce, 0x64, 0x64, 0x1b, 0x15,
	0x6c, 0x40, 0x65, 0x2a, 0x94, 0x56, 0x05, 0xb3, 0xa8, 0xb3, 0x4c, 0x67, 0x34, 0x1e, 0x99, 0xae,
	0x3d, 0x33, 0xea, 0xd8, 0x82, 0xfa, 0xdc, 0x19, 0x5b, 0xe6, 0xcc, 0x35, 0x1a, 0xa2, 0xf3, 0x7a,
	0x7e, 0xe5, 0x2a, 0xd8, 0x7c, 0x6b, 0x7c, 0x7d, 0xe8, 0x91, 0x6f, 0x0f, 0x3d, 0xf2, 0xfd, 0xa1,
	0x47, 0x3e, 0xfd, 0xe8, 0x1d, 0x2c, 0x6a, 0xf2, 0x37, 0xf8, 0xe2, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x50, 0x88, 0x28, 0x4c, 0x15, 0x05, 0x00, 0x00,
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAyame(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Mv) > 0 {
		i -= len(m.Mv)
		copy(dAtA[i:], m.Mv)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Mv)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Connection != 0 {
		i = encodeVarintAyame(dAtA, i, uint64(m.Connection))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintAyame(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintAyame(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CandidatePeers) > 0 {
		for iNdEx := len(m.CandidatePeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CandidatePeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAyame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.CloserPeers) > 0 {
		for iNdEx := len(m.CloserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAyame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.SenderAppData) > 0 {
		i -= len(m.SenderAppData)
		copy(dAtA[i:], m.SenderAppData)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.SenderAppData)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AuthorSign) > 0 {
		i -= len(m.AuthorSign)
		copy(dAtA[i:], m.AuthorSign)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.AuthorSign)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AuthorPubKey) > 0 {
		i -= len(m.AuthorPubKey)
		copy(dAtA[i:], m.AuthorPubKey)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.AuthorPubKey)))
		i--
		dAtA[i] = 0x52
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AuthorAppData) > 0 {
		i -= len(m.AuthorAppData)
		copy(dAtA[i:], m.AuthorAppData)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.AuthorAppData)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Mv) > 0 {
		i -= len(m.Mv)
		copy(dAtA[i:], m.Mv)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Mv)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.Timestamp != 0 {
		i = encodeVarintAyame(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintAyame(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsResponse {
		i--
		if m.IsResponse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderSign) > 0 {
		i -= len(m.SenderSign)
		copy(dAtA[i:], m.SenderSign)
		i = encodeVarintAyame(dAtA, i, uint64(len(m.SenderSign)))
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAyame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAyame(dAtA []byte, offset int, v uint64) int {
	offset -= sovAyame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAyame(uint64(m.Type))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovAyame(uint64(l))
		}
	}
	if m.Connection != 0 {
		n += 1 + sovAyame(uint64(m.Connection))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.Mv)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovAyame(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAyame(uint64(m.Type))
	}
	if m.Timestamp != 0 {
		n += 1 + sovAyame(uint64(m.Timestamp))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.Mv)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.AuthorAppData)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.AuthorPubKey)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.AuthorSign)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.SenderAppData)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if len(m.CloserPeers) > 0 {
		for _, e := range m.CloserPeers {
			l = e.Size()
			n += 1 + l + sovAyame(uint64(l))
		}
	}
	if len(m.CandidatePeers) > 0 {
		for _, e := range m.CandidatePeers {
			l = e.Size()
			n += 1 + l + sovAyame(uint64(l))
		}
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	l = len(m.SenderSign)
	if l > 0 {
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovAyame(uint64(l))
	}
	if m.IsResponse {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAyame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAyame(x uint64) (n int) {
	return sovAyame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAyame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAyame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			m.Connection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Connection |= ConnectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mv = append(m.Mv[:0], dAtA[iNdEx:postIndex]...)
			if m.Mv == nil {
				m.Mv = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAyame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAyame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAyame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAyame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mv = append(m.Mv[:0], dAtA[iNdEx:postIndex]...)
			if m.Mv == nil {
				m.Mv = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAppData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorAppData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &Peer{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorPubKey = append(m.AuthorPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorPubKey == nil {
				m.AuthorPubKey = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorSign = append(m.AuthorSign[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthorSign == nil {
				m.AuthorSign = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAppData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAppData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloserPeers = append(m.CloserPeers, &Peer{})
			if err := m.CloserPeers[len(m.CloserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidatePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidatePeers = append(m.CandidatePeers, &Peer{})
			if err := m.CandidatePeers[len(m.CandidatePeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAyame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAyame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MessageData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSign = append(m.SenderSign[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderSign == nil {
				m.SenderSign = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAyame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAyame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Peer{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResponse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResponse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAyame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAyame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAyame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAyame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAyame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAyame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAyame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAyame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAyame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAyame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAyame = fmt.Errorf("proto: unexpected end of group")
)
